{"version":3,"sources":["assets/images/todo.png","component/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","inputData","setInputData","list","localStorage","getItem","JSON","parse","getLocalData","todoList","setTodoList","toggleBtn","setToggleBtn","isEditItem","setIsEditItem","addItem","map","elem","id","todo","allInputData","Date","getTime","toString","alert","useEffect","setItem","stringify","className","src","alt","type","placeholder","value","onChange","e","target","title","onClick","editItem","find","console","log","updateTodoList","filter","deleteItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAAe,MAA0B,iC,OCqI1BA,EAvHF,WACX,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAZb,WACnB,IAAIG,EAAOC,aAAaC,QAAQ,aAEhC,OAAIF,EACKG,KAAKC,MAAMJ,GAEX,GAMgCK,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCV,oBAAS,GAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAoCZ,qBAApC,mBAAOa,EAAP,KAAmBC,EAAnB,KAEMC,EAAU,WACd,GAAKd,EAEE,GAAIA,GAAaU,EACtBD,EACED,EAASO,KAAI,SAACC,GACZ,OAAIA,EAAKC,KAAOL,EACP,2BAAKI,GAAZ,IAAkBE,KAAMlB,IAEnBgB,MAGXL,GAAa,GACbV,EAAa,IACbY,EAAc,UACT,CACL,IAAMM,EAAe,CACnBF,IAAI,IAAIG,MAAOC,UAAUC,WACzBJ,KAAMlB,GAERS,EAAY,GAAD,mBAAKD,GAAL,CAAeW,KAC1BlB,EAAa,SAnBbsB,MAAM,kDAkDV,OAHAC,qBAAU,WACRrB,aAAasB,QAAQ,YAAapB,KAAKqB,UAAUlB,MAChD,CAACA,IAEF,qBAAKmB,UAAU,WAAf,SACE,sBAAKA,UAAU,YAAf,UACE,mCACE,qBAAKC,IAAKV,EAAMW,IAAI,gBACpB,6DAEF,sBAAKF,UAAU,WAAf,UACE,uBACEG,KAAK,OACLC,YAAY,eACZC,MAAOhC,EACPiC,SAAU,SAACC,GACTjC,EAAaiC,EAAEC,OAAOH,UAGzBtB,EACC,mBACEiB,UAAU,cACVS,MAAM,cACNC,QAASvB,IAGX,mBAAGa,UAAU,cAAcS,MAAM,WAAWC,QAASvB,OAGzD,qBAAKa,UAAU,YAAf,SACGnB,EAASO,KAAI,SAACG,GACb,OACE,sBAAKS,UAAU,WAAf,UACE,6BAAKT,EAAKA,OACV,sBAAKS,UAAU,WAAf,UACE,mBACEA,UAAU,sBACVS,MAAM,YACNC,QAAS,kBA9DV,SAACpB,GAChB,IAAIqB,EAAW9B,EAAS+B,MAAK,SAACvB,GAC5B,OAAOA,EAAKC,KAAOA,KAErBuB,QAAQC,IAAIH,GACZ3B,GAAa,GACbV,EAAaqC,EAASpB,MACtBL,EAAcI,GAuDiBqB,CAASpB,EAAKD,OAE/B,mBACEU,UAAU,2BACVS,MAAM,cACNC,QAAS,kBAzDR,SAACpB,GAClB,IAAMyB,EAAiBlC,EAASmC,QAAO,SAACzB,GAEtC,OAAOD,IAAOC,EAAKD,MAErBR,EAAYiC,GAoDmBE,CAAW1B,EAAKD,YAXNC,EAAKD,SAkB1C,qBAAKU,UAAU,YAAf,SACE,wBACEA,UAAU,eACV,oBAAkB,aAClBU,QA5DQ,WAChB5B,EAAY,KAwDN,SAKE,uDClHGoC,MARf,WACE,OACE,qBAAKlB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1ddce6bc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/todo.d27aeb37.png\";","import React, { useState, useEffect } from 'react'\r\nimport todo from '../assets/images/todo.png'\r\n\r\n// get data form local storge\r\nconst getLocalData = () => {\r\n  let list = localStorage.getItem('todo-list')\r\n\r\n  if (list) {\r\n    return JSON.parse(list)\r\n  } else {\r\n    return []\r\n  }\r\n}\r\n\r\nconst Todo = () => {\r\n  const [inputData, setInputData] = useState('')\r\n  const [todoList, setTodoList] = useState(getLocalData())\r\n  const [toggleBtn, setToggleBtn] = useState(false)\r\n  const [isEditItem, setIsEditItem] = useState()\r\n  //   to add todos in the list\r\n  const addItem = () => {\r\n    if (!inputData) {\r\n      alert('Please Write something inside input field....')\r\n    } else if (inputData && toggleBtn) {\r\n      setTodoList(\r\n        todoList.map((elem) => {\r\n          if (elem.id === isEditItem) {\r\n            return { ...elem, todo: inputData }\r\n          }\r\n          return elem\r\n        })\r\n      )\r\n      setToggleBtn(true)\r\n      setInputData('')\r\n      setIsEditItem(null)\r\n    } else {\r\n      const allInputData = {\r\n        id: new Date().getTime().toString(),\r\n        todo: inputData,\r\n      }\r\n      setTodoList([...todoList, allInputData])\r\n      setInputData('')\r\n    }\r\n  }\r\n  // edit todo\r\n  const editItem = (id) => {\r\n    let editItem = todoList.find((elem) => {\r\n      return elem.id === id\r\n    })\r\n    console.log(editItem)\r\n    setToggleBtn(true)\r\n    setInputData(editItem.todo)\r\n    setIsEditItem(id)\r\n  }\r\n  //   delete single todo\r\n  const deleteItem = (id) => {\r\n    const updateTodoList = todoList.filter((todo) => {\r\n      // [html = > 0]\r\n      return id !== todo.id\r\n    })\r\n    setTodoList(updateTodoList)\r\n  }\r\n  //   remove / delete all todos\r\n  const removeAll = () => {\r\n    setTodoList([])\r\n  }\r\n\r\n  // add items/todos inside local storage\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('todo-list', JSON.stringify(todoList))\r\n  }, [todoList])\r\n  return (\r\n    <div className='main-div'>\r\n      <div className='child-div'>\r\n        <figure>\r\n          <img src={todo} alt='todo-images' />\r\n          <figcaption>Add Your List...</figcaption>\r\n        </figure>\r\n        <div className='addItems'>\r\n          <input\r\n            type='text'\r\n            placeholder='Add Items...'\r\n            value={inputData}\r\n            onChange={(e) => {\r\n              setInputData(e.target.value)\r\n            }}\r\n          />\r\n          {toggleBtn ? (\r\n            <i\r\n              className='fas fa-edit'\r\n              title='Update item'\r\n              onClick={addItem}\r\n            ></i>\r\n          ) : (\r\n            <i className='fas fa-plus' title='add item' onClick={addItem}></i>\r\n          )}\r\n        </div>\r\n        <div className='showItems'>\r\n          {todoList.map((todo) => {\r\n            return (\r\n              <div className='eachItem' key={todo.id}>\r\n                <h3>{todo.todo}</h3>\r\n                <div className='todo-btn'>\r\n                  <i\r\n                    className='fas fa-edit add-btn'\r\n                    title='Edit item'\r\n                    onClick={() => editItem(todo.id)}\r\n                  ></i>\r\n                  <i\r\n                    className='fas fa-trash-alt add-btn'\r\n                    title='delete item'\r\n                    onClick={() => deleteItem(todo.id)}\r\n                  ></i>\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n        <div className='showItems'>\r\n          <button\r\n            className='btn effect04'\r\n            data-sm-link-text='Remove All'\r\n            onClick={removeAll}\r\n          >\r\n            <span>CheckList</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Todo\r\n","import './App.css'\nimport Todo from './component/Todo'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Todo />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}